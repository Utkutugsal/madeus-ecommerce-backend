const { Database } = require('../config/database.js');

async function updateCategories() {
  const db = new Database();
  
  try {
    console.log('üîÑ Kategoriler g√ºncelleniyor...');
    
    // √ñnce mevcut kategorileri temizle
    await db.query('DELETE FROM categories');
    console.log('‚úÖ Eski kategoriler temizlendi');
    
    // Yeni basit kategorileri ekle
    const categories = [
      { name: 'Dudak Bakƒ±mƒ±', slug: 'dudak-bakimi', description: 'SPF korumalƒ± ve nemlendirici dudak √ºr√ºnleri' },
      { name: 'Y√ºz Serumlarƒ±', slug: 'yuz-serumlari', description: 'Vitamin C, Hyaluronic Acid, Bakuchiol ve diƒüer √∂zel bakƒ±m serumlarƒ±' },
      { name: 'Temizlik √úr√ºnleri', slug: 'temizlik-urunleri', description: 'Y√ºz temizleme jelleri, tonikler ve g√∂zenek bakƒ±m √ºr√ºnleri' },
      { name: 'G√ºne≈ü Koruma', slug: 'gunes-koruma', description: 'SPF i√ßerikli koruyucu kremler ve g√ºne≈ü bakƒ±m √ºr√ºnleri' },
      { name: 'Sa√ß Bakƒ±mƒ±', slug: 'sac-bakimi', description: 'Doƒüal sa√ß toniƒüi ve sa√ß bakƒ±m √ºr√ºnleri' },
      { name: 'Aksesuarlar', slug: 'aksesuarlar', description: 'Cilt bakƒ±m rutini i√ßin pratik aksesuarlar ve ara√ßlar' }
    ];
    
    for (const category of categories) {
      await db.query('INSERT INTO categories (name, slug, description) VALUES (?, ?, ?)', 
        [category.name, category.slug, category.description]);
    }
    
    console.log('‚úÖ Kategoriler ba≈üarƒ±yla g√ºncellendi!');
    console.log('üìã Yeni kategoriler:');
    
    const result = await db.query('SELECT * FROM categories ORDER BY id');
    result.forEach(cat => console.log(`- ID: ${cat.id}, Name: ${cat.name}`));
    
  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    process.exit();
  }
}

updateCategories(); 

async function updateCategories() {
  const db = new Database();
  
  try {
    console.log('üîÑ Kategoriler g√ºncelleniyor...');
    
    // √ñnce mevcut kategorileri temizle
    await db.query('DELETE FROM categories');
    console.log('‚úÖ Eski kategoriler temizlendi');
    
    // Yeni basit kategorileri ekle
    const categories = [
      { name: 'Dudak Bakƒ±mƒ±', slug: 'dudak-bakimi', description: 'SPF korumalƒ± ve nemlendirici dudak √ºr√ºnleri' },
      { name: 'Y√ºz Serumlarƒ±', slug: 'yuz-serumlari', description: 'Vitamin C, Hyaluronic Acid, Bakuchiol ve diƒüer √∂zel bakƒ±m serumlarƒ±' },
      { name: 'Temizlik √úr√ºnleri', slug: 'temizlik-urunleri', description: 'Y√ºz temizleme jelleri, tonikler ve g√∂zenek bakƒ±m √ºr√ºnleri' },
      { name: 'G√ºne≈ü Koruma', slug: 'gunes-koruma', description: 'SPF i√ßerikli koruyucu kremler ve g√ºne≈ü bakƒ±m √ºr√ºnleri' },
      { name: 'Sa√ß Bakƒ±mƒ±', slug: 'sac-bakimi', description: 'Doƒüal sa√ß toniƒüi ve sa√ß bakƒ±m √ºr√ºnleri' },
      { name: 'Aksesuarlar', slug: 'aksesuarlar', description: 'Cilt bakƒ±m rutini i√ßin pratik aksesuarlar ve ara√ßlar' }
    ];
    
    for (const category of categories) {
      await db.query('INSERT INTO categories (name, slug, description) VALUES (?, ?, ?)', 
        [category.name, category.slug, category.description]);
    }
    
    console.log('‚úÖ Kategoriler ba≈üarƒ±yla g√ºncellendi!');
    console.log('üìã Yeni kategoriler:');
    
    const result = await db.query('SELECT * FROM categories ORDER BY id');
    result.forEach(cat => console.log(`- ID: ${cat.id}, Name: ${cat.name}`));
    
  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    process.exit();
  }
}

updateCategories(); 